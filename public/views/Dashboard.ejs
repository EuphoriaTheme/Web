<% if (user) { %>
    <%- include('./components/Header-SI') %> <!-- Corrected to remove the .ejs extension -->
<% } else { %>
    <%- include('./components/Header') %> <!-- Corrected to remove the .ejs extension -->
<% } %>

<div class="pt-20 px-6">
    <div class="mx-auto max-w-2xl py-32 text-white">
        <h1 class="text-5xl font-semibold tracking-tight">Dashboard</h1>
        <p class="mt-4 text-lg">Manage your API tokens and gallery.</p>

        <div class="mt-8 bg-gray-800 p-4 rounded-lg">
            <h2 class="text-lg font-semibold">API Token</h2>
            <ul class="list-disc pl-5 mt-2">
                <li class="text-gray-400 flex items-center justify-between">
                    <span class="api-token"><%= user.apiKey %></span>
                    <div>
                        <button class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-1 px-3 rounded" onclick="copyToClipboard('<%= user.apiKey %>')">Copy</button>
                        <button class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-1 px-3 rounded" onclick="rerollToken()">Re-roll</button>
                    </div>
                </li>
            </ul>
        </div>
             
        <div class="mt-8 bg-gray-800 p-4 rounded-lg">
            <h2 class="text-lg font-semibold">Upload Gallery</h2>
            <form class="mt-4" id="uploadForm" enctype="multipart/form-data">
                <div class="relative">
                    <input type="file" name="image" id="image" class="hidden" required>
                    <label for="image" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded cursor-pointer inline-block">Choose File</label>
                    <span id="file-name" class="ml-2 text-gray-300">No file selected</span>
                </div>
                <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded mt-4">Upload</button>
            </form>
        </div>

        <div class="mt-8 bg-gray-800 p-4 rounded-lg">
            <h2 class="text-lg font-semibold">Your Gallery</h2>
            <p class="text-gray-400 text-sm">Gallery items will be displayed here.</p>
            <div id="gallery" class="mt-4 grid grid-cols-1 gap-4"></div> <!-- Gallery display -->
        </div>

        <!-- Donation Section -->
        <div class="mt-8 bg-gray-800 p-4 rounded-lg">
            <h2 class="text-lg font-semibold">Support Development</h2>
            <p class="text-gray-400 mt-2">
                Your donations help us continue development, keep this site and API running, and add more features. Every little bit helps!
            </p>
            <div class="mt-4 flex justify-center">
                <a href="https://paypal.me/repgraphics" target="_blank" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">
                    <i class="fa-brands fa-paypal"></i> Donate
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 z-50 hidden bg-gray-800 bg-opacity-75 flex justify-center items-center">
    <div class="bg-gray-900 p-8 rounded-lg shadow-lg w-96">
        <h1 class="text-2xl font-bold text-white mb-4">Confirm Deletion</h1>
        <p class="text-white">Are you sure you want to delete this image?</p>
        <div class="mt-6 flex justify-between">
            <button id="confirmDelete" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">Yes</button>
            <button id="cancelDelete" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">No</button>
        </div>
    </div>
</div>

<!-- Toast Notification Container -->
<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-4"></div>

<script>
    const baseUrl = window.location.origin; // Get the base URL

    // Function to show toast notification
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');

        // Create the toast element
        const toast = document.createElement('div');
        toast.className = `toast ${type} bg-gray-800 text-white py-3 px-4 rounded-lg shadow-lg relative overflow-hidden`;

        // Add message to the toast
        toast.innerHTML = `
            <span>${message}</span>
            <div class="toast-progress absolute bottom-0 left-0 h-1 bg-indigo-600"></div>
        `;

        // Append toast to the container
        toastContainer.appendChild(toast);

        // Animate the progress bar
        const progressBar = toast.querySelector('.toast-progress');
        progressBar.style.transition = 'width 5s linear';
        progressBar.style.width = '100%';

        // Remove the toast after 5 seconds
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    function copyToClipboard(text, isImage = false) {
    navigator.clipboard.writeText(text).then(() => {
        if (isImage) {
            showToast('Image URL copied to clipboard!', 'success');
        } else {
            showToast('API Token copied to clipboard!', 'success');
        }
    }).catch(err => {
        console.error('Failed to copy: ', err);
        showToast('Failed to copy!', 'error');
    });
}

    async function rerollToken() {
        try {
            const response = await fetch('/api/token/roll', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const data = await response.json();

            if (data.success) {
                showToast('Token re-rolled successfully!', 'success'); // Use toast instead of alert
            // Add a delay of 5 seconds (5000 milliseconds) before reloading the page
            setTimeout(() => {
                location.reload(); // Refresh the page to get the new token
            }, 5000);
            } else {
                console.error(data.error);
                showToast('Failed to re-roll the token.', 'error');
            }
        } catch (error) {
            console.error('Error rolling token:', error);
            showToast('An error occurred while rolling the token.', 'error');
        }
    }

    document.getElementById('image').addEventListener('change', function() {
    const fileName = this.files[0] ? this.files[0].name : 'No file selected';
    document.getElementById('file-name').textContent = fileName;
    });

    document.getElementById('uploadForm').addEventListener('submit', async function(event) {
        event.preventDefault(); // Prevent default form submission

        const formData = new FormData(this); // Get the form data

        try {
            const response = await fetch('/api/gallery/upload', {
                method: 'POST',
                body: formData // Send the form data
            });
            const data = await response.json();

            if (data.success) {
                showToast('Image uploaded successfully!', 'success'); // Use toast instead of alert
                loadGallery(); // Refresh the gallery to include the new image
            } else {
                showToast('Failed to upload image: ' + data.error, 'error');
            }
        } catch (error) {
            console.error('Error uploading image:', error);
            showToast('An error occurred while uploading the image.', 'error');
        }
    });

    async function loadGallery() {
        try {
            const response = await fetch('/api/gallery');
            const data = await response.json();

            if (data.success) {
                const galleryDiv = document.getElementById('gallery');
                galleryDiv.innerHTML = ''; // Clear existing images
                data.gallery.forEach(imageUrl => {
                    const imgDiv = document.createElement('div');
                    imgDiv.className = 'relative flex flex-col items-center'; // Use flexbox for alignment
                    imgDiv.innerHTML = `
                        <img src="${baseUrl}${imageUrl}" style="width: 584px; height: 155px; object-fit: cover;" class="rounded" />
                        <div class="absolute bottom-2 right-2 flex space-x-2 mr-8">
                            <button class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-1 px-2 rounded" onclick="copyToClipboard('${baseUrl}${imageUrl}', true)">
                                <i class="fas fa-copy"></i> <!-- Font Awesome icon -->
                            </button>
                            <button class="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-2 rounded" onclick="showDeleteModal('${imageUrl}')">
                                <i class="fas fa-trash"></i> <!-- Font Awesome icon -->
                            </button>
                        </div>
                    `;
                    galleryDiv.appendChild(imgDiv);
                });
            }
        } catch (error) {
            console.error('Error loading gallery:', error);
        }
    }

    let imageToDelete = null;

function showDeleteModal(imagePath) {
    imageToDelete = imagePath;
    document.getElementById('deleteModal').classList.remove('hidden');
}

document.getElementById('cancelDelete').addEventListener('click', function () {
    document.getElementById('deleteModal').classList.add('hidden');
    imageToDelete = null; // Clear the selected image
});

document.getElementById('confirmDelete').addEventListener('click', async function () {
    if (imageToDelete) {
        try {
            const response = await fetch('/api/gallery/delete', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imagePath: imageToDelete.split('/').pop() }) // Send just the filename
            });

            const data = await response.json();

            if (data.success) {
                showToast('Image deleted successfully!', 'success');
                loadGallery(); // Reload the gallery to update the view
            } else {
                showToast('Failed to delete the image.', 'error');
            }
        } catch (error) {
            console.error('Error deleting image:', error);
            showToast('An error occurred while deleting the image.', 'error');
        }

        document.getElementById('deleteModal').classList.add('hidden'); // Close the modal
        imageToDelete = null; // Reset the selected image
    }
});

    // Load gallery images when the page loads
    document.addEventListener('DOMContentLoaded', loadGallery);
</script>

<%- include('./components/Footer') %> <!-- Corrected to remove the .ejs extension -->
